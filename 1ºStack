#include <stdlib.h>
#include <stdio.h>
#include <time.h>    // time library srand() and rand() functions

typedef struct Node {
    int data;
    struct Node *next;
} NodeType;

typedef NodeType *objNode;
typedef NodeType *Stack;

void Push(Stack *l, int aux);
int Pop(Stack *l);

int main() {
    Stack stack = NULL;
    
    clock_t start=clock();
    
    int random=0,size=0,pos=0,search_num=0;
    printf("Type the size you want the stack to be: ");
    scanf("%d",&size);
    srand(time(NULL));//generates random numbers everytime the program is executed
    for(pos=0;pos<size;pos++){
        random=rand() % 10;
        printf("\tThe following random number has been assigned to the stack: %d\n",random);
        Push(&stack,random);
    }
    printf("Which number would you like to search on the stack? \n");
    scanf("\t%d",&search_num);
   	int foundOnArray=0;
    for(pos=0;pos<size;pos++){
        if(Pop(&stack)==search_num){
            printf("%d poped out of the stack -> position %d \n",search_num,pos);
            foundOnArray=1;
        }
    }
    printf("The runtime was: %f\n",((double)clock()-start)/CLOCKS_PER_SEC);
    if(!foundOnArray){
        printf("\t Sorry, the value %d couldn't be found on the stack\n", search_num);
        return 0;
    }
}

void Push(Stack *stack, int aux) {
    objNode head;
    head = (objNode)malloc(sizeof(NodeType));
    head->data = aux;
    
    head->next = *stack;
    *stack = head;
}

int Pop(Stack *stack) {
    objNode node;
    int aux;
    
    node = *stack;
    if(!node) return 0;
    
    *stack = node->next;
    aux = node->data;
    free(node);
    return aux;
}
